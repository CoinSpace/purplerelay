AWSTemplateFormatVersion: 2010-09-09
Description: Setup ECS Cluster
Parameters:
  ClusterName:
    Type: String

  ECSInstanceType:
    Type: String

  KeyName:
    Type: String

  AsgServiceMin:
    Type: String

  AsgServiceDesired:
    Type: String

  AsgServiceMax:
    Type: String

  EcsImage:
    Type: AWS::EC2::Image::Id

Conditions:
  isEbsEncrypted: !Equals
    - !Ref EbsEncrypted
    - 'yes'

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs-cluster/${ClusterName}

#========== Roles
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${ClusterName}_EC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::Region}-${ClusterName}_EC2InstanceProfile

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${ClusterName}_ECSRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

#========== Security Groups
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub ${ClusterName}VPC
      GroupName: !Sub ${ClusterName}AllowSSH
      GroupDescription: Enables access to all IPs to port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

#========== ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ClusterName}

#========== EC2
  BastionEIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-bastion
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref BastionSecurityGroup
            - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup
          SubnetId:
            'Fn::ImportValue': !Sub ${ClusterName}PublicSubnet1
      ImageId: !Ref EcsImage
      InstanceType: t3a.micro
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile

  BastionAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt BastionEIP.AllocationId
      InstanceId: !Ref BastionInstance

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      ImageId: !Ref EcsImage
      SecurityGroups:
        - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup
      InstanceType: !Ref ECSInstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: !If
              - isEbsEncrypted
              - true
              - !Ref 'AWS::NoValue'
            VolumeSize: 30
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #====== Resize EBS
            resize2fs /dev/xvda

          #====== Install SSM
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            start amazon-ssm-agent
            chkconfig amazon-ssm-agent on

          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_INSTANCE_ATTRIBUTES={\"cluster_type\":\"web\"} >> /etc/ecs/ecs.config
          #====== Install Kernel Headers
            yum install -y kernel-devel-$(uname -r)

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName} cluster
          PropagateAtLaunch: true
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref AsgServiceMin
      DesiredCapacity: !Ref AsgServiceDesired
      MaxSize: !Ref AsgServiceMax
      TargetGroupARNs:
        - 'Fn::ImportValue': !Sub ${ClusterName}BackendAlbDefaultTargetGroup
      VPCZoneIdentifier:
        - 'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet1
        - 'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref AsgServiceDesired
        PauseTime: 'PT5M'

#========== Actions for ASG
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '600'
      ScalingAdjustment: -1

Outputs:
  ScaleUpPolicy:
    Value: !Ref ScaleUpPolicy
    Export:
      Name: !Sub ${ClusterName}-ScaleUpPolicy

  ScaleDownPolicy:
    Value: !Ref ScaleDownPolicy
    Export:
      Name: !Sub ${ClusterName}-ScaleDownPolicy

  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub ${ClusterName}-BastionSecurityGroup

  ECSRoleArn:
    Value: !Sub ${ECSRole.Arn}
    Export:
      Name: !Sub ${ClusterName}-ECSRoleArn

  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ClusterName}-ECSCluster

  ECSClusterArn:
    Value: !Sub ${ECSCluster.Arn}
    Export:
      Name: !Sub ${ClusterName}-ECSClusterArn

  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub ${ClusterName}-AutoScalingGroup