Parameters:
######## Codepipeline parameters ########
  ProviderRepo:
    Type: String
    Default: strfry

  ProviderBranch:
    Type: String
    Default: feature/version-1.0.1

  Owner:
    Type: String
    Default: purplerelay

  ConnectionArn:
    Type: String

  InfraRepo:
    Type: String
    Default: relay

  InfraBranch:
    Type: String
    Default: feature/aws-cloudformation

  # DockerLogin:
  #   Type: String

  # DockerLoginKey:
  #   Type: String
  #   NoEcho: true

######## Cluster parameters ########
  ClusterName:
    Type: String
    Default: purplerelay

  ######## Services parameters ########
  DefaultAcmCertificateArn:
    Type: String

  SiteTgPriority:
    Type: Number
    Default: 1

  HasHTTPS:
    Type: String
    Default: true

  # Change the value when using the right DNS
  SiteName:
    Type: String
    Default: "purplerelay.com"

  ContainerPort:
    Type: Number
    Default: 80

  ContainerMemoryMin:
    Type: Number
    Default: 3600

  ContainerMemoryMax:
    Type: String
    Default: 3600

  ContainerVirtualCPUs:
    Type: Number
    Default: 1870

  EcsTasksNumber:
    Type: Number
    Default: 1

  MaxCapacity:
    Type: Number
    Default: 4

  MinCapacity:
    Type: Number
    Default: 1

  AppName:
    Type: String
    Default: relay

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Codepipeline General Params
      Parameters:
        - Owner
        - Provider
        - ProviderRepo
        - ProviderBranch
        - ProviderToken

    - Label:
        default: Cluster General Params
      Parameters:
        - ClusterName

Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties: 
      RepositoryName: !Sub ${ClusterName}

  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      RoleName: !Sub cfn-${AWS::StackName}-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*
                  - application-autoscaling:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - ssm:*
                  - route53:*
                  - cloudwatch:*
                  - events:*
                  - secretsmanager:*
                  - autoscaling:*
                  - rds:*
                  - servicediscovery:*
                  - logs:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${AWS::StackName}-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - cloudformation:*
                  - ecs:*
                  - ec2:*
                  - s3:*
                  - ecr:*
                  - codebuild:*
                  - ssm:GetParameters
                  - secretsmanager:GetSecretValue
                  - autoscaling:*
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${AWS::StackName}-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: infra-services
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:*'
                Effect: Allow
                Action:
                  - iam:PassRole
              - Resource: !Sub 'arn:aws:s3:::*'
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetObjectVersioning
                  - s3:PutObject
              - Resource: '*'
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
              - Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:*'
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
              - Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:*'
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      BucketName: !Sub service-artifact-${AWS::Region}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /ecs-cluster/${AWS::StackName}
          Status: ENABLED
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "S3"
        BuildSpec: !Sub aws/cloudformation/service/buildspec/buildspec.yml
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/standard:5.0"
        Type: "LINUX_CONTAINER"
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          # - Name: DOCKER_LOGIN
          #   Value: !Sub ${DockerLogin}
          # - Name: DOCKER_LOGIN_KEY
          #   Value: !Sub ${DockerLoginKey}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ClusterName}-service
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Join [ "/", [ !Ref "Owner", !Ref "ProviderRepo" ] ]
                BranchName: !Ref ProviderBranch
                OutputArtifactFormat: "CODE_ZIP"
                DetectChanges: false
              OutputArtifacts:
                - Name: App
              RunOrder: 1

            - Name: Infra
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Join [ "/", [ !Ref "Owner", !Ref "InfraRepo" ] ]
                BranchName: !Ref InfraBranch
                OutputArtifactFormat: "CODE_ZIP"
                DetectChanges: false
              OutputArtifacts:
                - Name: Infra
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: Infra
              InputArtifacts:
                - Name: App
                - Name: Infra
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 2

        - Name: ChangeSet
          Actions:
            - Name: CreateBackendWebChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub service-${ClusterName}-ecs
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: Infra::aws/cloudformation/service/service-ecs.yml
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ClusterName": "${ClusterName}",
                    "ContainerVirtualCPUs": "${ContainerVirtualCPUs}",
                    "ContainerMemoryMin": "${ContainerMemoryMin}",
                    "ContainerMemoryMax": "${ContainerMemoryMax}",
                    "EcsTasksNumber": "${EcsTasksNumber}",
                    "ContainerPort": "${ContainerPort}",
                    "DockerImageVersion": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                    "GitCommit": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                    "MaxCapacity": "${MaxCapacity}",
                    "MinCapacity": "${MinCapacity}",
                    "DefaultAcmCertificateArn": "${DefaultAcmCertificateArn}",
                    "SiteTgPriority": "${SiteTgPriority}",
                    "HasHTTPS": "${HasHTTPS}",
                    "SiteName": "${SiteName}",
                    "AppName": "${AppName}"
                  }
              RunOrder: 3
              InputArtifacts:
                - Name: Infra
                - Name: BuildOutput

            - Name: ExecuteBackendWebChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub service-${ClusterName}-ecs
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
              RunOrder: 4

            - Name: CreateServiceAlarmsChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub service-${ClusterName}-alarms
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: Infra::aws/cloudformation/service/service-alarms.yml
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ClusterName": "${ClusterName}",
                    "AppName": "${AppName}"
                  }
              RunOrder: 5
              InputArtifacts:
                - Name: Infra
                - Name: BuildOutput

            - Name: ExecuteServiceAlarmsChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub service-${ClusterName}-alarms
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
              RunOrder: 6

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}

  CodePipeline:
    Value: !Ref Pipeline
    Export:
      Name: !Sub ${ClusterName}-cluster-codepipeline

  ArtifactBucket:
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub service-artifact-${AWS::Region}
